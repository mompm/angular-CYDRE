Le composant TemperatureSeasonal affiche un graphique de l'évapotranspiration saisonnière basé sur les données de température. Ce composant gère l'affichage dynamique des données en fonction de la station sélectionnée et des années choisies.

Importations
- Angular Core (Component, Input, SimpleChanges, OnDestroy, HostListener) : Gestion des composants et des entrées.
- Data : Service pour la gestion des données.
- Json : Service pour gérer les opérations JSON, notamment les requêtes de température.
- Plotly.js : Bibliothèque pour créer des graphiques interactifs.
- Simple Statistics (median) : Utilisé pour le calcul de la médiane des données.
- Math.js : Utilisé pour le calcul des quantiles.
- RxJS : Utilisé pour la gestion des flux asynchrones via des Observables.
- dataTemperature : Modèle représentant les données de température.
- Color : Service pour la gestion des couleurs des graphiques.

Variables

1. Gestion des données :
   - DataTemperature : Tableau pour stocker les données de température.
   - lastUpdate : Date de la dernière mise à jour des données.
   - TabTemperatureByDaily : Tableau contenant toutes les données de température triées.
   - YearTabTemperatureByDaily : Tableau contenant les données de température triées pour les années sélectionnées.
   - resultArray : Tableau contenant les quantiles calculés (Q10, Q50, Q90).

2. Sélection de la station :
   - stationSelectionChange : ID de la station sélectionnée, utilisé pour changer le graphique en fonction de la sélection.

3. Gestion du graphique :
   - fig : Objet pour stocker la figure Plotly.
   - yearSelectionChange : Liste des années sélectionnées pour l'affichage du graphique.
   - months : Noms des mois pour l'affichage.
   - tickvals, ticktext : Valeurs et textes pour les ticks de l'axe des X.

Méthodes

1. Cycle de vie Angular :
   - ngOnInit() : Méthode appelée lors de l'initialisation du composant. Configure un écouteur pour le redimensionnement de la fenêtre et charge les données de température.
   - ngOnDestroy() : Méthode pour nettoyer les écouteurs lorsque le composant est détruit.
   - ngOnChanges(changes: SimpleChanges) : Méthode appelée lorsque les propriétés @Input changent, recharge les données de température si la station ou l'année sélectionnée change.

2. Gestion des données :
   - initStationTemperature(stationID: string) : Charge les données de température pour la station spécifiée via Json.

3. Traitement des données :
   - processedTemperature() : Traite les données de température pour en extraire les informations quotidiennes et annuelles, ainsi que la date de la dernière mise à jour.
   - calculateQuantiles(TemperatureByDaily: any[]) : Calcule les quantiles (Q10, Q50, Q90) pour les données de température quotidiennes.

4. Création de graphiques :
   - temperature_Seasonal() : Met à jour et affiche le graphique de l'évapotranspiration saisonnière avec les données actuelles, incluant les tracés pour les quantiles et les données par année.

5. Téléchargement de données :
   - downloadCSV() : Prépare les données pour le téléchargement au format CSV.