Le composant graphiqueSeasonal gère l'affichage des graphiques de séries temporelles basés sur les données sélectionnées pour différentes stations. Il permet d'afficher des graphiques en fonction des types de données comme la profondeur, la température, les précipitations, et le débit.

 Importations :
- Angular Core (Component, Input, SimpleChanges, OnDestroy, HostListener) : Gestion des composants et des événements du cycle de vie.
- Plotly.js : Bibliothèque pour la création de graphiques interactifs.
- simple-statistics (median, quantile) : Gestion des statistiques simples pour le calcul des quantiles.
- mathjs : Bibliothèque mathématique pour des calculs avancés.
- RxJS : Gestion des flux asynchrones via des Observables.
- Services (ColorService, DataService, JsonService) : Gestion des données, de la couleur et des fichiers JSON.
- Models (dataPrecipitation, dataDepth, dataTemperature, dataDischarge) : Modèles de données pour les différents types de séries temporelles.
- dataService : Service de gestion des données.
- jsonService : Service de gestion des fichiers JSON.
- colorService : Service de gestion des couleurs pour le graphique.

 Variables :
1. Configuration du graphique :
   - GraphType: Type de graphique à afficher (ex : 'depth', 'temperature', 'precipitation', 'hydrograph').
   - stationSelectionChange: Identifiant de la station sélectionnée pour les graphiques.
   - yearSelectionChange: Liste des années sélectionnées pour l'affichage des données.

2. Gestion des données :
   - DataStation: Données brutes pour la station sélectionnée.
   - TabDataByDaily, YearTabDataByDaily: Tableaux contenant les données triées par jour et par année.
   - lastUpdate: Date de la dernière mise à jour des données.
   - resultArray: Tableau contenant les quantiles (10%, 50%, 90%) calculés pour les données affichées.

3. Gestion du graphique :
   - fig: Objet de configuration pour le graphique Plotly.
   - months: Liste des noms de mois utilisés pour l'affichage sur l'axe des X.
   - tickvals: Valeurs de graduation pour l'axe des X au format 'MM-01'.
   - ticktext: Texte des graduations de l'axe des X (noms des mois).

 Méthodes :
1. Cycle de vie Angular :
   - ngOnInit(): Initialisation du composant, ajout de l'écouteur pour le redimensionnement de la fenêtre et chargement des données en fonction du type de graphique sélectionné.
   - ngOnDestroy(): Nettoyage de l'écouteur d'événements lors de la destruction du composant.
   - ngOnChanges(changes: SimpleChanges): Gère les changements des propriétés @Input et réinitialise le graphique en fonction des sélections de station ou d'année.

2. Gestion des données :
   - initStationDepth(stationID: string): Récupère les données de profondeur pour la station sélectionnée et initialise le graphique.
   - initStationPrecipitation(stationID: string): Récupère les données de précipitation pour la station sélectionnée et initialise le graphique.
   - initStationTemperature(stationID: string): Récupère les données de température pour la station sélectionnée et initialise le graphique.
   - initStationDischarge(stationID: string): Récupère les données de débit pour la station sélectionnée et initialise le graphique.

3. Traitement des données :
   - processedData(typeData: string, data: any[], targetYears: number[]): Traite les données pour les rendre utilisables dans les graphiques. Retourne les données journalières, par année et la date de mise à jour.
   - calculateQuantiles(typeData: string, data: any[]): Calcule les quantiles (10%, 50%, 90%) pour les données fournies en fonction du type de données.

4. Création de graphiques :
   - create_graph_seasonal(datatype: string, data: any[]): Crée un graphique des séries temporelles basé sur le type de données spécifié, en traitant les données et en configurant le graphique Plotly.

5. Téléchargement de données :
   - downloadCSV(): Génère et télécharge un fichier CSV contenant les données météorologiques ou hydrologiques selon le type de graphique sélectionné.

