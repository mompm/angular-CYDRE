1. Définition des Routes
Dans Angular, le fichier de routage sert à lier des URL spécifiques à des composants de l'application. Autrement dit, selon l'URL visitée par l'utilisateur, un composant particulier sera rendu.

Par exemple :
	-L'URL /ficheSite affichera le composant FicheSiteComponent.
	-L'URL /login affichera le composant LoginComponent.

Ces correspondances sont définies dans un tableau de routes (appelé routes), qui établit les associations entre les chemins et les composants.

2. Protection des Routes avec des Guards
Certaines routes peuvent être protégées grâce à des "guards", comme le AuthGuard. Un "guard" est un service qui vérifie si certaines conditions sont remplies avant de permettre l'accès à une route. Le AuthGuard est utilisé pour sécuriser des pages comme la création de compte ou l'accès à l'historique des simulations.

Exemple :
	-La route /create-account sera protégée par le AuthGuard, et donc accessible uniquement si l'utilisateur est autorisé.

Un "guard" peut aussi utiliser des données supplémentaires (data) pour déterminer les permissions d'accès. Par exemple, on peut spécifier un checkType pour définir le rôle de l'utilisateur (comme checkType: 'dev' pour un développeur ou checkType: 'log' pour des utilisateurs avec des droits spécifiques).

3. Redirection des Chemins Invalides
Une route spéciale avec le chemin path: '**' est définie pour capturer toutes les URL qui ne correspondent à aucune des routes existantes. Si un utilisateur tente d'accéder à une page non définie dans l'application, il sera redirigé automatiquement vers /ficheSite, évitant ainsi une page d'erreur.

4. Chargement des Routes via RouterModule
Le module de routage d'Angular utilise RouterModule.forRoot(routes) pour enregistrer les routes au niveau global de l'application. Cela permet à Angular de savoir comment gérer la navigation entre les différentes pages. En exportant RouterModule, ces routes deviennent accessibles à travers toute l'application, facilitant ainsi la navigation.