Le service Json est un service Angular responsable de la gestion des interactions l'API pour récupérer, mettre à jour et manipuler des données hydrologiques et de simulation dans le cadre de modélisations environnementales.

Importations :
	-Angular core (Injectable) :  permet à Angular de l'injecter dans d'autres composants ou services où il est nécessaire. 
	-HttpClient: Utilisé pour effectuer des requêtes HTTP (GET, POST, etc.).
	-HttpParams : Gestion des paramètres dans les requêtes HTTP, permet d'ajouter des paramètres dynamiques aux URLs.
	-RxJS (Observable, Subject, catchError, concatMap, finalize, forkJoin, from, lastValueFrom, map, of, switchMap, takeWhile, tap, timer, toArray ) : Utilisé pour la gestion des flux 	asynchrones via des Observables, ce qui permet une meilleure gestion des appels réseau et des événements en temps réel.
	-Modèles (dataGDFWatersheds, dataGDFPiezometry, dataDischarge, dataGDFStation, dataTemperature, dataDepth, dataPrecipitation) : Modèles de données représentant les données 	hydrologiques
	-Math.js (forEach) : Utilisée pour des opérations mathématiques avancées.

Variables :
	-baseUrl: String représentant l'URL de base des requêtes API. Par défaut, cette propriété est initialisée comme une chaîne vide.


1. Méthodes pour la gestion des données hydrologiques
Ces méthodes interagissent avec différentes sources de données relatives aux bassins versants, aux stations hydrologiques, etc. Elles utilisent lastValueFrom, une fonction de RxJS qui transforme un Observable en Promise. Cela permet de gérer les appels réseau de manière asynchrone avec des promesses.
-getGDFWatersheds : Cette méthode récupère un tableau de données des bassins versants (GDF). Chaque entrée du tableau correspond aux informations d'un bassin versant (id, nom, superficie, etc.).
	- Paramètres : Aucun.
	- Retour : Promise<any[]>

-getGDFStations : Récupère un tableau de stations hydrologiques. Les stations hydrologiques sont des points de mesure de différents paramètres environnementaux (débit, température, précipitation, etc.).
	- Paramètres : Aucun.
	- Retour : Promise<any[]>

-getGDFPiezometry : Cette méthode récupère des données de piézométrie (mesures de la profondeur de la nappe phréatique). Elle renvoie un tableau de ces données.
	- Paramètres : Aucun.
	- Retour : Promise<any[]>
 
-getDischarge(id: string) : Récupère les données de débit (discharge) pour une station hydrologique spécifique. Ce débit est mesuré en m³/s (ou une autre unité) et représente le flux d'eau en sortie de la station.
	- Paramètres : 
  		- id : Identifiant de la station hydrologique.
	- Retour : Promise<any>

-getTemperature(id: string) : Récupère les données de température d'une station hydrologique spécifique.
	- Paramètres : 
  		- id : Identifiant de la station hydrologique.
	- Retour : Promise<any>

-getDepth(id: string) : Récupère les données de profondeur de la nappe phréatique pour une station spécifique.
	- Paramètres : 
  		- id : Identifiant de la station hydrologique.
	- Retour : Promise<any>
 
-getPrecipitation(id: string) : Récupère les données de précipitations pour une station spécifique. Cela peut inclure les précipitations historiques ou en temps réel mesurées à la station.
	- Paramètres : 
  		- id : Identifiant de la station hydrologique.
	- Retour : Promise<any>

2. Méthodes pour la gestion des simulations
Ces méthodes gèrent la création, l'exécution et la récupération des résultats des simulations hydrologiques. Chaque méthode retourne généralement un Promise puisque les opérations sont asynchrones et impliquent des appels réseau.
-updateSimualtionsBetaDatabase(station: string) : Cette méthode met à jour les simulations bêta dans la base de données pour une station spécifique. 
	- Paramètres :
  		- station : Identifiant de la station pour laquelle la base de données de simulations bêta doit être mise à jour.
	- Retour : Promise<void>

-CreateSimulation(params: any): Promise<any> : Crée une nouvelle simulation dans la base de données et retourne les informations de la simulation créée (identifiant, date de création, paramètres utilisés).
	- Paramètres :
  		- params : Un objet contenant les paramètres nécessaires pour créer la simulation (bassins, indicateurs, période, etc.).
	- Retour : Promise<any>

-runSpatialSimilarity(simulation_id: string): Promise<any> : Exécute l'analyse de similarité spatiale pour une simulation donnée. Cela compare les bassins versants pour identifier les similitudes géographiques entre les zones étudiées.
	- Paramètres :
  		- simulation_id : Identifiant de la simulation.
	- Retour : Promise<any>

-runTimeseriesSimilarity(simulation_id: string): Promise<any> : Exécute l'analyse de similarité temporelle (comparaison des séries temporelles) pour une simulation donnée.
	- Paramètres :
  		- simulation_id : Identifiant de la simulation.
	- Retour : Promise<any>
 
-runScenarios(simulation_id: string) : Exécute les différents scénarios associés à une simulation donnée (par exemple, projection de scénarios de précipitation ou de changement climatique).
	- Paramètres :
  		- simulation_id : Identifiant de la simulation.
	- Retour : Promise<any>

-getForecastResults(taskId: string): Promise<any> : Récupère les résultats de prévision générés par la simulation. Cela inclut généralement des prévisions à long terme ou des résultats de tendance pour un bassin donné.
	- Paramètres :
  		- taskId : Identifiant de la tâche de prévision (généralement lié à une simulation).
	- Retour : Promise<any>

-getResults(taskId: string): Promise<any> ; Récupère les résultats d'une simulation terminée (analyse des indicateurs, similarité, tendances, etc.).
	- Paramètres :
  		- taskId : Identifiant de la tâche (simulation).
	- Retour : Promise<any>

-runSimulation(params: any, progressCallback: Function) : Cette méthode gère une simulation complète. Elle suit plusieurs étapes, rapportant la progression à chaque phase via progressCallback (Création de la simulation, Identification des bassins et années similaires, Exécution de scénarios, Calcul des tendances et génération des résultats).
	- Paramètres :
  		- params : Les paramètres pour la simulation.
  		- progressCallback : Une fonction appelée pour chaque étape du processus, permettant de rapporter la progression de l'exécution.
	- Retour : Promise<void>

-getCorrMatrix(taskId: string): Promise<any> : Récupère la matrice de corrélation générée par une simulation. La matrice de corrélation est utilisée pour comprendre les relations entre différentes variables dans les résultats de simulation.
	- Paramètres :
  		- taskId : Identifiant de la tâche de simulation.
	- Retour : Promise<any>

3. Gestion des indicateurs
Ces méthodes permettent de récupérer, mettre à jour ou supprimer des indicateurs dans le cadre d'une simulation.
-get_indicators_value(simulation_id: string): Promise<any>: Récupère les valeurs des indicateurs associés à une simulation spécifique.
	- Paramètres :
  		- simulation_id : Identifiant de la simulation.
	- Retour : Promise<any>

-removeIndicator(simulationId: string, indicatorType: string): Promise<void> : Supprime un indicateur d'une simulation donnée.
	- Paramètres :
  		- simulationId : Identifiant de la simulation.
  		- indicatorType : Type de l'indicateur à supprimer.
	- Retour : Promise<void>

-updateIndicatorsValue(simulation_id: string, indicators: any): Promise<void> : Met à jour les valeurs des indicateurs associés à une simulation donnée.

	- Paramètres :
  		- simulation_id : Identifiant de la simulation.
  		- indicators : Un objet contenant les nouvelles valeurs des indicateurs.
	- Retour : Promise<void>

-updateM10Value(params: any): Promise<void> : Met à jour la valeur M10 d'un indicateur, une mesure clé souvent utilisée dans les simulations hydrologiques.
	- Paramètres :
  		- params : Paramètres contenant les informations à mettre à jour pour l'indicateur M10.
	- Retour : Promise<void>

4.Méthodes simulation 
Ces méthodes permettent de récupérer des informations sur les simulations créées par un utilisateur.
-getUserSimulations(): Observable<any[]>: Récupère toutes les simulations créées par l'utilisateur courant sous forme d'un Observable.
	- Paramètres : Aucun.
	- Retour : Observable<any[]>

-getBetaSimulation(index: number): Promise<any> : Récupère une simulation bêta par son index (position dans la liste des simulations bêta).
	- Paramètres :
  		- index : Index de la simulation bêta à récupérer.
	- Retour : Promise<any>
